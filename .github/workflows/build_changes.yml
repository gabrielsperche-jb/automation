name: Automation Flow

on: [ merge ]


jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Set up the Java environment
      - name: Preparing Environment
        uses: actions/setup-java@v1
        with:
          java-version: '8.0.192'
          java-package: jdk
          architecture: x64

      # Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      # Find the modules that have changed
      - name: List Changed Modules
        id: list_modules
        run: |
          list=$(git diff --name-only HEAD^ | grep -Eo ".*(connector|common)\/" | uniq | sed 's/\/$//' | tr '\n' ',' | sed 's/,$//')
          echo "Modules changed: $list"
        
          has_common=$(echo "$list" | grep -- '-common' > /dev/null && echo true || echo false)

          echo "Commit includes common changes: $has_common"

          if $has_common; then
            allModules=$(find /home/runner/work/automation/automation -type d -name '*-connector*' -printf "%f ")
            echo "Non-Filtered: $allModules"
        
            filteredModules=$(diff <(echo "$allModules" | tr ' ' '\n' | sort) <(echo "$list" | tr ',' '\n' | sort) | grep '^<' | sed 's/< //' | tr '\n' ' ')
            echo "Filtered: $filteredModules"
          
            filteredByManifest=()
            
            for module in $filteredModules; do
              if grep -q '^Author: Jitterbit$' "/home/runner/work/automation/automation/$module/src/main/resources/META-INF/MANIFEST.MF"; then
                filteredByManifest+=("$module")
              fi
            done
          
          echo "Filtered by Manifest: ${filteredByManifest[*]}"
          
          fi

          
          echo "commonFlag=$has_common" >> $GITHUB_OUTPUT
          echo "modules=$list" >> $GITHUB_OUTPUT
          echo "filteredModules=${filteredByManifest[@]}" >> $GITHUB_OUTPUT

      # Build the changed modules using Maven
      - name: Build Projects
        run: |
          modules="${{ steps.list_modules.outputs.modules }}"
          filteredModules="${{ steps.list_modules.outputs.filteredModules }}"
          flag="${{ steps.list_modules.outputs.commonFlag }}"
          
          filteredModulesArray=$(echo "${filteredModules}" | tr ' ' ',')
          
          if [ -z "$modules" ]; then
            echo "No changes in modules. Skipping build."
          else
            echo "Modules to be built: $modules"
            echo "Building using: mvn -q --projects $modules --also-make install"
            mvn -q --projects $modules --also-make install
          fi
          
          echo "Does commons changed: $flag"
          
          if $flag; then
            echo "Modules will be built due changes on common"
            echo "Building using: mvn -q --projects $filteredModulesArray --also-make install"
            mvn -q --projects $filteredModulesArray --also-make install
          fi

      # Get the latest release tag from the repository.
      - name: Get latest release tag
        if: success()
        id: get_latest_release
        run: |
          
          # Get the latest release tag.
          latest_tag=$(git ls-remote --tags | awk '{print $2}' | sort -V | tail -n1 | sed 's/refs\/tags\///')
          echo "Last Tag: $latest_tag"
          
          # Set an output variable for the latest tag.
          echo "latest=$latest_tag" >> $GITHUB_OUTPUT

      # Increment the latest release tag.
      - name: Increment tag
        if: success()
        id: increment_tag
        run: |
          # Get the latest release tag from the output variable of the previous step.
          version=${{ steps.get_latest_release.outputs.latest }}
          echo "Updating tag: $version"
          
          # Split the tag into an array of version numbers.
          IFS='.' read -ra arr <<< "$version"
          
          # Increment the last version number.
          last=${arr[-1]}
          ((last++))
          arr[-1]=$last
          
          # Combine the version numbers into a new tag.
          new_version=$(IFS='.'; echo "${arr[*]}")
          echo "New version: $new_version"
          
          # Set an output variable for the new tag.
          echo "new_tag=$new_version" >> $GITHUB_OUTPUT

      # Tag the latest commit with the new tag.
      - name: Tag commit with new tag
        if: success()
        run: |
          # Get the new tag from the output variable of the previous step.
          echo "Tagging with ${{ steps.increment_tag.outputs.new_tag }}"
          
          # Set the email and name for the Git commit.
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create a new tag and push it to the repository.
          git tag ${{ steps.increment_tag.outputs.new_tag }}
          git push origin ${{ steps.increment_tag.outputs.new_tag }}

      # Retrieve Filenames and Full Path of changed .jar files
      - name: Retrieve Filename and Path
        if: success()
        id: ftpFiles
        run: |
          echo "${{ steps.list_modules.outputs.modules }}"
          modules="${{ steps.list_modules.outputs.modules }}"

          #Attribute modules names into an array
          IFS=',' read -ra modules_array <<< "$modules"

          echo "firstChangedModule=${modules_array[0]}" >> $GITHUB_OUTPUT
          echo "allChangedModules=${modules_array[@]}" >> $GITHUB_OUTPUT

      # Create a temporary folder with release folder that contains .jar files to be uploaded
      - name: Create a folder with jar files
        if: success()
        id: createFolders
        run: |
          
          #Function to retrieve name from .properties, Manifest.MF or adapter.json files
          getModuleName() {
              local module="$1"
              local propFile="./$module/spec.properties"
              local name=""
          
            #Check if spec.properties exists
            if [ -f "$propFile" ]; then
              name="$(grep 'name' "$propFile" | cut -d'=' -f2)"
            fi
          
            #If it doesn't exists, try to retrieve from Manifest.MF
            if [ -z "$name" ]; then
              local manifestFile="./$module/target/classes/META-INF/MANIFEST.MF"
              if [ -f "$manifestFile" ]; then
                name="$(grep 'ReleaseTag' "$manifestFile" | cut -d':' -f2 | tr -d '[:space:]')"
              fi
            fi
          
            #Finally as last resource, retrieve from adapter.json
            if [ -z "$name" ]; then
              local adapterFile="./$module/ui/adapter.json"
              if [ -f "$adapterFile" ]; then
                name=$(jq -r '.name' "$adapterFile" | tr -d '[:space:]')
              fi
            fi
          
            echo "$name"
          }


          # Get the name of all changed modules
          changedModules=$(echo "${{ steps.ftpFiles.outputs.allChangedModules }}")
          IFS=' ' read -ra allChangedModules <<< "$changedModules"
          echo "Module Names: ${allChangedModules[@]}"
          
          # Get list of affected connectors by common changes
          commonChangedConnectors="${{ steps.list_modules.outputs.filteredModules }}"
          IFS=' ' read -ra commonChangedConnArray <<< "$commonChangedConnectors"
          echo "Module Names Affected by Common Changes: ${commonChangedConnArray[@]}"
          
          tag=${{ steps.increment_tag.outputs.new_tag }}
          echo "Tag name: $tag"
          
          # Create the temp folder with the release folder inside
          firstConnector="${allChangedModules[0]}"
          mkdir -p ./$firstConnector/target/filesToUpload
          
          for eachModule in "${allChangedModules[@]}"
          do
            #Retrieve module name from .properties file
            name=$(getModuleName "$eachModule")
            echo "The name of $module module is $name"
          
            #Build path to .jar file of connector
            connectorJarPath=$(ls -1 ./$eachModule/target/*.jar)
            echo "Connector Jar Path: $connectorJarPath"
          
            #Create folder to each connector with same tag
            connectorFolder=$tag"-"$name
            echo "Connector Folder: $connectorFolder"
            mkdir -p ./$firstConnector/target/filesToUpload/$connectorFolder
          
            #Move the .jar to destination folder
            mv -f $connectorJarPath ./$firstConnector/target/filesToUpload/$connectorFolder
          done
          
          #Do the same to common affected connectors
          for connector in "${commonChangedConnArray[@]}"
          do
            #Retrieve module name from .properties file
            name=$(getModuleName "$connector")
            echo "The name of $module module is $name"
          
            #Build path to .jar file of connector
            connectorJarPath=$(ls -1 ./$connector/target/*.jar)
            echo "Connector Jar Path: $connectorJarPath"
          
            #Create folder to each connector with same tag
            connectorFolder=$tag"-common-"$name
            echo "Connector Folder: $connectorFolder"
            mkdir -p ./$firstConnector/target/filesToUpload/$connectorFolder
          
            #Move the .jar to destination folder
            mv -f $connectorJarPath ./$firstConnector/target/filesToUpload/$connectorFolder
          done

          echo "targetFolder=$firstConnector" >> $GITHUB_OUTPUT

      # Upload the release folder to Reposit replacing if exists
      - name: Upload files to ftp server
        if: success()
        uses: wangyucode/sftp-upload-action@v2.0.2
        id: upload-to-ftp
        with:
          host: reposit.jitterbit.com
          username: gabriel.goncalves
          password: Rafael@10
          localDir: './${{ steps.createFolders.outputs.targetFolder }}/target/filesToUpload'
          remoteDir: './Builds/connectors/CDATA/test/uploadedFile'